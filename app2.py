import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import hashlib
# Imports necess√°rios (adicione no in√≠cio do seu arquivo)
import plotly.graph_objects as go
import plotly.express as px

# Digite sua senha aqui (exemplo: "minhasenha123")
senha = "digite_a_senha_que_voce_quer_aqui"  
hash_gerado = hashlib.sha256(senha.encode()).hexdigest()
print(f"Hash para colocar no c√≥digo: {hash_gerado}")
# Configura√ß√£o da p√°gina (opcional)
st.set_page_config(page_title="App Privado", layout="wide")

def check_password():
    """Verifica a senha com hash seguro"""
    if st.session_state.get("password_correct", False):
        return True
    
    # Substitua este hash pelo que voc√™ gerou no passo 1
    correct_hash = "aqui_vai_seu_hash_gerado_no_passo_1"
    
    password_placeholder = st.empty()
    input_password = password_placeholder.text_input(
        "Digite a senha para acessar:", 
        type="password", 
        key="password_input"
    )
    
    if input_password:
        input_hash = hashlib.sha256(input_password.encode()).hexdigest()
        if hmac.compare_digest(input_hash, correct_hash):
            st.session_state["password_correct"] = True
            password_placeholder.empty()  # Remove o campo de senha
            return True
        else:
            st.error("‚ùå Senha incorreta")
            return False
    return False

if not check_password():
    st.stop() 

@st.cache_data
def carregar_dados_efetivo():
    df = pd.read_excel("efetivo_abril.xlsx", sheet_name="EFETIVO", engine="openpyxl")
    df.columns = df.columns.str.strip()
    df = df[df['Obra'].notna()]  # NOVO: Remove linhas com 'Obra' vazia/nan
    
    df['Hora Extra 70% - Semana'] = pd.to_numeric(df['Hora Extra 70% - Semana'], errors='coerce').fillna(0)
    df['Hora Extra 70% - Sabado'] = pd.to_numeric(df['Hora Extra 70% - Sabado'], errors='coerce').fillna(0)
    if 'Repouso Remunerado' not in df.columns:
        df['Repouso Remunerado'] = 0
    else:
        df['Repouso Remunerado'] = pd.to_numeric(df['Repouso Remunerado'], errors='coerce').fillna(0)
    df['Remunera√ß√£o L√≠quida Folha'] = pd.to_numeric(df['Remunera√ß√£o L√≠quida Folha'], errors='coerce').fillna(0)
    df['Adiantamento'] = pd.to_numeric(df['Adiantamento'], errors='coerce').fillna(0)
    return df

@st.cache_data
def carregar_terceiros():
    df_terceiros = pd.read_excel("efetivo_abril.xlsx", sheet_name="TERCEIROS", engine="openpyxl")
    df_terceiros.columns = df_terceiros.columns.str.strip()
    df_terceiros = df_terceiros[df_terceiros['Obra'].notna()]  # NOVO: Remove linhas com 'Obra' vazia/nan
    df_terceiros['QUANTIDADE'] = pd.to_numeric(df_terceiros['QUANTIDADE'], errors='coerce').fillna(0).astype(int)
    return df_terceiros

def definir_colunas_ganhos_descontos():
    """Define as colunas de ganhos e descontos"""
    ganhos = [
  'SAL√ÅRIO',
    'Periculosidade',
    'Dias De Atestado',
    'Gratifica√ß√£o',
    'Adicional noturno 20%',
    'Ajuda De Saude',
    'Auxilio Creche',
    'Auxilio Educacao',
    'EQUIP. TRAB/FERRAMENTA',
    'Auxilio Moradia',
    'Auxilio Transporte',
    'Adicional Noturno 20%',
    'Dev.desc.indevido',
    'Sal√°rio Substitui√ß√£',
    'Reflexo S/ He Produ√ß√£o',
    'Reembolso V. Transporte',
    'Pr√™mio',
    'Premio-gestao Desempenho',
    'Passagem Interior',
    'Passagem Interior Adiantamento',
    'Hora Extra 70% - Sabado',
    'Hora Extra 70% - Semana',
    'Sal√°rio Maternidade',
    'Adicional H.e S/ Producao 70%',
    'PRODU√á√ÉO',
    'AJUDA DE CUSTO',
    'Ajuda de Custo Combustivel',
    'REFLEXO S PRODU√á√ÉO',
    'Hora Extra 100%',
    'Repouso Remunerado',
    'Periculosidade',
    'Sal√°rio Fam√≠lia',
    'Insufici√™ncia de Saldo',
    'Auxilio Transporte Retroativo',
    'Insufici√™ncia de Saldo'
    ]
    
    descontos = [
 'Atrasos',
    'Faltas em Dias',
    'Assistencia Medica',
    'Coparticipacao Dependente',
    'Coparticipacao Titular',
    'Desconto Empr√©stimo',
    'Diferenca Plano De Saude',
    'Desconto √ìtica',
    'Plano Odontologico',
    'Plano Odontologico Dependente',
    'Pens√£o Aliment√≠cia  Sal√°rio M√≠nimo',
    'Assit√™ncia M√©dica Dependente',
    'Dsr sobre falta',
    'INSS Folha',
    'IRRF Folha',
    'Pens√£o Aliment√≠cia', 'DESCONTO DE ALIMENTA√á√ÉO',
    'MENSALIDADE SINDICAL',
    'Vale Transporte','Corre√ß√£o adiantamento'


    ]

    
    return ganhos, descontos

def criar_grafico_cascata(df_filtrado, ganhos, descontos):
    """Cria o gr√°fico de cascata"""
    # Calcula totais
    total_ganhos = 0
    total_descontos = 0
    
    # Soma ganhos (colunas que existem no DataFrame)
    for col in ganhos:
        if col in df_filtrado.columns:
            total_ganhos += pd.to_numeric(df_filtrado[col], errors='coerce').fillna(0).sum()
    
    # Soma descontos (colunas que existem no DataFrame)
    for col in descontos:
        if col in df_filtrado.columns:
            total_descontos -= pd.to_numeric(df_filtrado[col], errors='coerce').fillna(0).sum()
    
    # Remunera√ß√£o l√≠quida
    remuneracao_liquida = total_ganhos - total_descontos
    
    # Dados para o gr√°fico de cascata
    categorias = ['Ganhos', 'Descontos', 'Remunera√ß√£o L√≠quida']
    valores = [total_ganhos, total_descontos, remuneracao_liquida]
    cores = ['green', 'red', 'blue']
    
    fig_cascata = go.Figure()
    
    # Adiciona as barras
    fig_cascata.add_trace(go.Waterfall(
        name="Fluxo Financeiro",
        orientation="v",
        measure=["relative", "relative", "total"],
        x=categorias,
        textposition="outside",
        text=[f"R$ {v:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".") for v in [total_ganhos, total_descontos, remuneracao_liquida]],
        y=[total_ganhos, -total_descontos, 0],
        connector={"line": {"color": "rgb(63, 63, 63)"}},
        increasing={"marker": {"color": "green"}},
        decreasing={"marker": {"color": "red"}},
        totals={"marker": {"color": "blue"}}
    ))
    
    fig_cascata.update_layout(
        title="An√°lise Financeira - Ganhos vs Descontos",
        showlegend=False,
        yaxis_title="Valor (R$)",
        xaxis_title="Categoria"
    )
    
    return fig_cascata, total_ganhos, total_descontos, remuneracao_liquida

def criar_grafico_detalhado(df_filtrado, colunas, titulo, cor):
    """Cria gr√°fico de colunas detalhado para ganhos ou descontos"""
    dados_detalhados = []
    
    for col in colunas:
        if col in df_filtrado.columns:
            valor = pd.to_numeric(df_filtrado[col], errors='coerce').fillna(0).sum()
            if valor != 0:  # S√≥ inclui se houver valor
                dados_detalhados.append({'Categoria': col, 'Valor': valor})
    
    if not dados_detalhados:
        return None
    
    df_detalhado = pd.DataFrame(dados_detalhados)
    df_detalhado = df_detalhado.sort_values('Valor', ascending=False)
    
    fig_detalhado = px.bar(
        df_detalhado,
        x='Categoria',
        y='Valor',
        title=titulo,
        color_discrete_sequence=[cor],
        text=df_detalhado['Valor'].apply(lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
    )
    
    fig_detalhado.update_traces(textposition='outside')
    fig_detalhado.update_layout(xaxis_tickangle=-45)
    
    return fig_detalhado

# ======================================
# DASHBOARD DE EFETIVO
# ======================================

def dashboard_efetivo():
    st.title("üìä An√°lise de Efetivo - Obras")

    df = carregar_dados_efetivo()
    df_terceiros = carregar_terceiros()

    # üî¥ Excluir obra "ESCRIT√ìRIO ENGENHARIA"
    df = df[df['Obra'] != 'ESCRIT√ìRIO ENGENHARIA']
    df_terceiros = df_terceiros[df_terceiros['Obra'] != 'ESCRIT√ìRIO ENGENHARIA']

    ganhos, descontos = definir_colunas_ganhos_descontos()
    df['Total Extra'] = df['Hora Extra 70% - Semana'] + df['Hora Extra 70% - Sabado']

    with st.sidebar:
        st.header("üîç Filtros - Efetivo")
        lista_obras = sorted(df['Obra'].astype(str).unique())
        obras_selecionadas = st.multiselect("Obras:", lista_obras, default=lista_obras)
        tipo_selecionado = st.radio("Tipo:", ['Todos', 'DIRETO', 'INDIRETO', 'TERCEIRO'], horizontal=True)
        tipo_analise = st.radio("Tipo de An√°lise da Tabela:", ['Produ√ß√£o', 'Hora Extra Semana', 'Hora Extra S√°bado'])
        qtd_linhas = st.radio("Qtd. de Funcion√°rios na Tabela:", ['5', '10', '20', 'Todos'], horizontal=True)
        tipo_peso = st.radio("Tipo de Peso (Gr√°ficos Novos):", ['Peso sobre Produ√ß√£o', 'Peso sobre Hora Extra'])
        
        st.divider()
        st.header("üí∞ An√°lise Financeira")
        analise_financeira = st.radio("An√°lise Financeira:", ['Geral', 'Ganhos', 'Descontos'])
        
        # Novo filtro por fun√ß√£o APENAS para an√°lise financeira
        nome_col_funcao = 'Fun√ß√£o' if 'Fun√ß√£o' in df.columns else 'Fun√ßao' if 'Fun√ßao' in df.columns else None
        if nome_col_funcao:
            funcoes_disponiveis = sorted(df[nome_col_funcao].astype(str).unique())
            funcao_selecionada = st.selectbox(
                "Filtrar por Fun√ß√£o (An√°lise Financeira):",
                ["Todas"] + funcoes_disponiveis
            )

    # Filtra obras selecionadas (para todos os gr√°ficos)
    df_filtrado = df[df['Obra'].isin(obras_selecionadas)]
    df_terceiros_filtrado = df_terceiros[df_terceiros['Obra'].isin(obras_selecionadas)]

    # Filtra por tipo (para todos os gr√°ficos)
    if tipo_selecionado != 'Todos':
        if tipo_selecionado in ['DIRETO', 'INDIRETO']:
            df_filtrado = df_filtrado[df_filtrado['Tipo'] == tipo_selecionado]
        elif tipo_selecionado == 'TERCEIRO':
            df_filtrado = df_filtrado[0:0]  # vazio, terceiros est√£o em outro DF

    # Cria um DataFrame filtrado APENAS para an√°lise financeira (se fun√ß√£o selecionada)
    if nome_col_funcao and 'funcao_selecionada' in locals() and funcao_selecionada != "Todas":
        df_filtrado_financeiro = df_filtrado[df_filtrado[nome_col_funcao] == funcao_selecionada]
    else:
        df_filtrado_financeiro = df_filtrado.copy()

    # M√©tricas principais (usa df_filtrado - sem filtro de fun√ß√£o)
    direto_count = len(df[df['Obra'].isin(obras_selecionadas) & (df['Tipo'] == 'DIRETO')])
    indireto_count = len(df[df['Obra'].isin(obras_selecionadas) & (df['Tipo'] == 'INDIRETO')])
    total_terceiros = df_terceiros_filtrado['QUANTIDADE'].sum()
    total_geral = direto_count + indireto_count + total_terceiros

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("üë∑ Direto", direto_count)
    col2.metric("üë∑‚Äç‚ôÇÔ∏è Indireto", indireto_count)
    col3.metric("üèóÔ∏è Terceiro", total_terceiros)
    col4.metric("üë• Total", total_geral)

    st.divider()

    # An√°lise Financeira (usa df_filtrado_financeiro - com filtro de fun√ß√£o se aplic√°vel)
    if not df_filtrado_financeiro.empty and tipo_selecionado != 'TERCEIRO':
        st.markdown("### üí∞ An√°lise Financeira")
        
        if analise_financeira == 'Geral':
            fig_cascata, total_ganhos, total_descontos, remuneracao_liquida = criar_grafico_cascata(df_filtrado_financeiro, ganhos, descontos)
            st.plotly_chart(fig_cascata, use_container_width=True)
            
            # Calcula m√©dias por funcion√°rio
            num_funcionarios = len(df_filtrado_financeiro)
            media_ganhos = total_ganhos / num_funcionarios if num_funcionarios > 0 else 0
            media_descontos = total_descontos / num_funcionarios if num_funcionarios > 0 else 0
            media_liquida = remuneracao_liquida / num_funcionarios if num_funcionarios > 0 else 0
            
            col_fin1, col_fin2, col_fin3 = st.columns(3)
            col_fin1.metric("üíö Total Ganhos", 
                          f"R$ {total_ganhos:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                          f"M√©dia: R$ {media_ganhos:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            col_fin2.metric("üí∏ Total Descontos", 
                          f"R$ {total_descontos:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                          f"M√©dia: R$ {media_descontos:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            col_fin3.metric("üí∞ Remunera√ß√£o L√≠quida", 
                          f"R$ {remuneracao_liquida:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."),
                          f"M√©dia: R$ {media_liquida:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            
        elif analise_financeira == 'Ganhos':
            fig_ganhos = criar_grafico_detalhado(df_filtrado_financeiro, ganhos, "Detalhamento dos Ganhos", "green")
            if fig_ganhos:
                st.plotly_chart(fig_ganhos, use_container_width=True)
            else:
                st.warning("Nenhum dado de ganhos encontrado para os filtros selecionados.")
                
        elif analise_financeira == 'Descontos':
            fig_descontos = criar_grafico_detalhado(df_filtrado_financeiro, descontos, "Detalhamento dos Descontos", "red")
            if fig_descontos:
                st.plotly_chart(fig_descontos, use_container_width=True)
            else:
                st.warning("Nenhum dado de descontos encontrado para os filtros selecionados.")
        
        st.divider()

    # Todos os outros gr√°ficos usam df_filtrado (sem filtro de fun√ß√£o)
    # Pizza - Distribui√ß√£o por tipo
    pizza_base = df[df['Obra'].isin(obras_selecionadas)]
    pizza_diretos_indiretos = pizza_base['Tipo'].value_counts().reset_index()
    pizza_diretos_indiretos.columns = ['Tipo', 'count']
    pizza_terceiros = pd.DataFrame({'Tipo': ['TERCEIRO'], 'count': [total_terceiros]})
    pizza = pd.concat([pizza_diretos_indiretos, pizza_terceiros], ignore_index=True)

    fig_pizza = px.pie(pizza, names='Tipo', values='count', title='Distribui√ß√£o por Tipo de Efetivo', hole=0.3)
    fig_pizza.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig_pizza, use_container_width=True)

    if tipo_selecionado == 'TERCEIRO':
        st.divider()
        st.markdown("### üèóÔ∏è Funcion√°rios Terceirizados por Empresa e Obra")
        tabela_terceiros = df_terceiros_filtrado.groupby(['Obra', 'EMPRESA'])['QUANTIDADE'].sum().reset_index()
        st.dataframe(tabela_terceiros, use_container_width=True)
        return
    coluna_valor = {
        'Produ√ß√£o': 'PRODU√á√ÉO',
        'Hora Extra Semana': 'Hora Extra 70% - Semana',
        'Hora Extra S√°bado': 'Hora Extra 70% - Sabado'
    }[tipo_analise]

    if tipo_selecionado == 'Todos':
        df_ranking = df_filtrado[df_filtrado['Tipo'].isin(['DIRETO', 'INDIRETO'])]
    else:
        df_ranking = df_filtrado

    nome_col_funcao = 'Fun√ß√£o' if 'Fun√ß√£o' in df_ranking.columns else 'Fun√ßao' if 'Fun√ßao' in df_ranking.columns else None

    if tipo_analise == 'Produ√ß√£o' and 'REFLEXO S PRODU√á√ÉO' in df_ranking.columns:
        df_ranking['DSR'] = df_ranking['REFLEXO S PRODU√á√ÉO']
        cols_rank = ['Nome do Funcion√°rio', nome_col_funcao, 'Obra', 'Tipo', 'PRODU√á√ÉO', 'DSR']
        valor_coluna = 'PRODU√á√ÉO'
    else:
        cols_rank = ['Nome do Funcion√°rio', nome_col_funcao, 'Obra', 'Tipo', coluna_valor]
        valor_coluna = coluna_valor

    cols_rank = [c for c in cols_rank if c is not None and c in df_ranking.columns]
    df_ranking_limp = df_ranking[cols_rank].copy()
    df_ranking_limp = df_ranking_limp[pd.to_numeric(df_ranking_limp[valor_coluna], errors='coerce').notna()]
    df_ranking_limp = df_ranking_limp[df_ranking_limp[valor_coluna] > 0]
    ranking = df_ranking_limp.sort_values(by=valor_coluna, ascending=False)

    valor_total = df_ranking_limp[valor_coluna].sum()
    st.markdown(f"### üìã Top Funcion√°rios por **{tipo_analise}**")
    st.markdown(f"**Total em {tipo_analise}:** R$ {valor_total:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

    if qtd_linhas != 'Todos':
        ranking = ranking.head(int(qtd_linhas))

    def formatar_valor(x):
        return f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

    ranking[valor_coluna] = ranking[valor_coluna].apply(formatar_valor)
    if 'DSR' in ranking.columns:
        ranking['DSR'] = ranking['DSR'].apply(formatar_valor)

    st.dataframe(ranking, use_container_width=True)
    st.divider()
    
    if nome_col_funcao and nome_col_funcao in df_ranking.columns:
        graf_funcao = df_ranking[nome_col_funcao].value_counts().reset_index()
        graf_funcao.columns = [nome_col_funcao, 'Qtd']
        fig_bar = px.bar(
            graf_funcao,
            x=nome_col_funcao,
            y='Qtd',
            color='Qtd',
            color_continuous_scale='Blues',
            title='Quantidade por Fun√ß√£o',
            labels={'Qtd': 'Quantidade', nome_col_funcao: 'Fun√ß√£o'}
        )
        st.plotly_chart(fig_bar, use_container_width=True)

    st.divider()

    todas_obras = sorted(df['Obra'].astype(str).unique())
    peso_lista = []
    for obra in todas_obras:
        df_obra = df[df['Obra'] == obra]
        df_direto = df_obra[df_obra['Tipo'] == 'DIRETO']
        prod_numerador = df_direto['PRODU√á√ÉO'].sum() + df_direto['REFLEXO S PRODU√á√ÉO'].sum()
        prod_denominador = df_direto['Remunera√ß√£o L√≠quida Folha'].sum() + df_direto['Adiantamento'].sum()
        df_dir_ind = df_obra[df_obra['Tipo'].isin(['DIRETO', 'INDIRETO'])]
        total_extra = df_dir_ind['Total Extra'].sum()
        reposo_remunerado = df_dir_ind['Repouso Remunerado'].sum()
        hor_extra_denominador = df_dir_ind['Remunera√ß√£o L√≠quida Folha'].sum() + df_dir_ind['Adiantamento'].sum()

        if tipo_peso == 'Peso sobre Produ√ß√£o':
            peso = (prod_numerador / prod_denominador) if prod_denominador > 0 else 0
        else:
            peso = ((total_extra + reposo_remunerado) / hor_extra_denominador) if hor_extra_denominador > 0 else 0

        peso_lista.append({'Obra': obra, 'Peso Financeiro': peso})

    df_peso = pd.DataFrame(peso_lista)
    df_peso = df_peso.sort_values(by='Peso Financeiro', ascending=False)
    df_peso['Selecionada'] = df_peso['Obra'].apply(lambda x: x in obras_selecionadas)
    colors = df_peso['Selecionada'].map({True: 'darkblue', False: 'lightblue'})

    fig_peso = px.bar(
        df_peso,
        x='Obra',
        y='Peso Financeiro',
        title=f'Peso Financeiro por Obra ({tipo_peso})',
        labels={'Peso Financeiro': '√çndice', 'Obra': 'Obra'},
        text=df_peso['Peso Financeiro'].apply(lambda x: f"{x:.2%}"),
    )

    fig_peso.update_traces(
        marker_color=colors,
        textposition='outside',
        marker_line_color='black',
        marker_line_width=0.5
    )
    
    fig_peso.update_layout(
        yaxis_tickformat='.0%',
        showlegend=False,
        xaxis={'categoryorder': 'array', 'categoryarray': df_peso['Obra']}
    )

    st.plotly_chart(fig_peso, use_container_width=True)


# Dicion√°rio para mapear meses em ingl√™s para abrevia√ß√µes em portugu√™s
MES_POR_PT = {
    'Jan': 'Jan',
    'Feb': 'Fev',
    'Mar': 'Mar',
    'Apr': 'Abr',
    'May': 'Mai',
    'Jun': 'Jun',
    'Jul': 'Jul',
    'Aug': 'Ago',
    'Sep': 'Set',
    'Oct': 'Out',
    'Nov': 'Nov',
    'Dec': 'Dez'
}

# Mapeamento m√™s portugu√™s para n√∫mero do m√™s
MES_PT_PARA_NUM = {
    'Jan': 1, 'Fev': 2, 'Mar': 3, 'Abr': 4, 'Mai': 5, 'Jun': 6,
    'Jul': 7, 'Ago': 8, 'Set': 9, 'Out': 10, 'Nov': 11, 'Dez': 12
}

def mes_ano_pt(dt):
    # Retorna string formatada em portugu√™s tipo 'Abr/24'
    mes_eng = dt.strftime('%b')  # abrevia√ß√£o em ingl√™s
    mes_pt = MES_POR_PT.get(mes_eng, mes_eng)
    ano = dt.strftime('%y')
    return f"{mes_pt}/{ano}"

def data_pt_para_datetime(mes_ano_pt_str):
    # Recebe string tipo "Abr/24" e converte para pd.Timestamp(ano, mes, dia=1)
    mes_pt, ano_str = mes_ano_pt_str.split('/')
    mes = MES_PT_PARA_NUM[mes_pt]
    ano = 2000 + int(ano_str)  # exemplo: '24' vira 2024
    return pd.Timestamp(year=ano, month=mes, day=1)


def dashboard_produtividade():
    def carregar_dados():
        df = pd.read_excel("produtividade.xlsx")
        df['DATA'] = pd.to_datetime(df['DATA'], format='%d/%m/%Y')
        return df

    def filtrar_dados(df, tipo_obra, servico, datas_selecionadas):
        if tipo_obra != "Todos":
            df = df[df['TIPO_OBRA'] == tipo_obra]
        if servico:
            df = df[df['SERVI√áO'] == servico]
        if datas_selecionadas:
            datas_dt = [data_pt_para_datetime(d) for d in datas_selecionadas]
            df = df[df['DATA'].dt.to_period('M').isin(pd.to_datetime(datas_dt).to_period('M'))]
        return df

    def criar_grafico_indices_completos(df, servico):
        df['M√äS'] = df['DATA'].dt.to_period('M')
        df_mensal = df.groupby('M√äS').agg({
            '√çNDICE S/ (PP+HH EXT.)': 'mean',
            '√çNDICE + PP': 'mean',
            '√çNDICE + PP + HH EXT': 'mean',
            '√çNDICE OR√áADO': 'mean',
            '√çNDICE + PP + HH EXT ACUMULADO': 'mean'
        }).reset_index()

        df_mensal['DATA'] = df_mensal['M√äS'].dt.to_timestamp()
        df_mensal['DATA_FORMATADA_PT'] = df_mensal['DATA'].apply(mes_ano_pt)

        # Renomear colunas com prefixo do servi√ßo
        df_mensal_renomeado = df_mensal.rename(columns={
            '√çNDICE S/ (PP+HH EXT.)': f'{servico} - √çNDICE S/ (PP+HH EXT.)',
            '√çNDICE + PP': f'{servico} - √çNDICE + PP',
            '√çNDICE + PP + HH EXT': f'{servico} - √çNDICE + PP + HH EXT',
            '√çNDICE OR√áADO': f'{servico} - √çNDICE OR√áADO',
            '√çNDICE + PP + HH EXT ACUMULADO': f'{servico} - √çNDICE + PP + HH EXT ACUMULADO'
        })

        colunas_plot = [col for col in df_mensal_renomeado.columns if col.startswith(servico)]

        fig = px.line(
            df_mensal_renomeado,
            x='DATA',
            y=colunas_plot,
            labels={'value': '√çndice', 'DATA': 'M√™s/Ano'},
            title=f"üìà Evolu√ß√£o dos √çndices - {servico}",
            markers=True
        )

        fig.update_xaxes(
            tickformat="%b/%y",
            tickmode='array',
            tickvals=df_mensal_renomeado['DATA'],
            ticktext=df_mensal_renomeado['DATA_FORMATADA_PT']
        )

        return fig, df_mensal

    df = carregar_dados()

    with st.sidebar:
        st.header("üîç Filtros - Produtividade")
        tipo_obra_opcoes = ["Todos"] + df['TIPO_OBRA'].dropna().unique().tolist()
        tipo_obra = st.selectbox('Selecione o Tipo de Obra', tipo_obra_opcoes)

        servicos_opcoes = sorted(df['SERVI√áO'].dropna().unique().tolist())
        servico = st.selectbox('Selecione o Servi√ßo (1 por vez)', servicos_opcoes)

        meses_unicos = df['DATA'].dt.to_period('M').drop_duplicates().sort_values()
        mes_ano_opcoes = [mes_ano_pt(pd.Timestamp(m.start_time)) for m in meses_unicos]
        datas_selecionadas = st.multiselect('Selecione o(s) M√™s/Ano', mes_ano_opcoes, default=mes_ano_opcoes)

    # Aplicar filtros
    df_filtrado = filtrar_dados(df, tipo_obra, servico, datas_selecionadas)

    # Criar gr√°fico de linha com todas as colunas de √≠ndice
    fig_indices, df_mensal = criar_grafico_indices_completos(df_filtrado, servico)
    st.title("üìà Dashboard de Produtividade")
    st.plotly_chart(fig_indices, use_container_width=True)

    # Tabela com colunas espec√≠ficas + desvio (positiva = economia de HH)
    df_mensal['M√äS/ANO'] = df_mensal['DATA'].apply(mes_ano_pt)
    df_tabela = df_mensal[['M√äS/ANO', '√çNDICE OR√áADO', '√çNDICE + PP + HH EXT']].copy()
    df_tabela['DESVIO'] = df_tabela['√çNDICE OR√áADO'] - df_tabela['√çNDICE + PP + HH EXT']
    df_tabela = df_tabela.round(2)

    st.markdown("### üìä Tabela de √çndices e Desvio (Or√ßado - Real)")
    st.dataframe(df_tabela, use_container_width=True)


@st.cache_data
def carregar_dados_efetivo():
    df = pd.read_excel("efetivo_abril.xlsx", sheet_name="EFETIVO", engine="openpyxl")
    df.columns = df.columns.str.strip()
    df = df[df['Obra'].notna()]  # Remove linhas com 'Obra' vazia/nan
    
    df['Hora Extra 70% - Semana'] = pd.to_numeric(df['Hora Extra 70% - Semana'], errors='coerce').fillna(0)
    df['Hora Extra 70% - Sabado'] = pd.to_numeric(df['Hora Extra 70% - Sabado'], errors='coerce').fillna(0)
    if 'Repouso Remunerado' not in df.columns:
        df['Repouso Remunerado'] = 0
    else:
        df['Repouso Remunerado'] = pd.to_numeric(df['Repouso Remunerado'], errors='coerce').fillna(0)
    df['Remunera√ß√£o L√≠quida Folha'] = pd.to_numeric(df['Remunera√ß√£o L√≠quida Folha'], errors='coerce').fillna(0)
    df['Adiantamento'] = pd.to_numeric(df['Adiantamento'], errors='coerce').fillna(0)
    return df
    


@st.cache_data
def carregar_terceiros():
    df_terceiros = pd.read_excel("efetivo_abril.xlsx", sheet_name="TERCEIROS", engine="openpyxl")
    df_terceiros.columns = df_terceiros.columns.str.strip()
    df_terceiros = df_terceiros[df_terceiros['Obra'].notna()]  # Remove linhas com 'Obra' vazia/nan
    df_terceiros['QUANTIDADE'] = pd.to_numeric(df_terceiros['QUANTIDADE'], errors='coerce').fillna(0).astype(int)
    return df_terceiros

def definir_colunas_ganhos_descontos():
    """Define as colunas de ganhos e descontos (compartilhada)"""
    ganhos = [
        'SAL√ÅRIO', 'Periculosidade', 'Dias De Atestado', 'Gratifica√ß√£o', 
        'Adicional noturno 20%', 'Ajuda De Saude', 'Auxilio Creche', 
        'Auxilio Educacao', 'EQUIP. TRAB/FERRAMENTA', 'Auxilio Moradia',
        'Auxilio Transporte', 'Adicional Noturno 20%', 'Dev.desc.indevido',
        'Sal√°rio Substitui√ß√£', 'Reflexo S/ He Produ√ß√£o', 'Reembolso V. Transporte',
        'Pr√™mio', 'Premio-gestao Desempenho', 'Passagem Interior',
        'Passagem Interior Adiantamento', 'Hora Extra 70% - Sabado',
        'Hora Extra 70% - Semana', 'Sal√°rio Maternidade', 'Adicional H.e S/ Producao 70%',
        'PRODU√á√ÉO', 'AJUDA DE CUSTO', 'Ajuda de Custo Combustivel', 'REFLEXO S PRODU√á√ÉO',
        'Hora Extra 100%', 'Repouso Remunerado', 'Periculosidade', 'Sal√°rio Fam√≠lia',
        'Insufici√™ncia de Saldo', 'Auxilio Transporte Retroativo', 'Insufici√™ncia de Saldo'
    ]
    
    descontos = [
        'Atrasos', 'Faltas em Dias', 'Assistencia Medica', 'Coparticipacao Dependente',
        'Coparticipacao Titular', 'Desconto Empr√©stimo', 'Diferenca Plano De Saude',
        'Desconto √ìtica', 'Plano Odontologico', 'Plano Odontologico Dependente',
        'Pens√£o Aliment√≠cia  Sal√°rio M√≠nimo', 'Assit√™ncia M√©dica Dependente',
        'Dsr sobre falta', 'INSS Folha', 'IRRF Folha', 'Pens√£o Aliment√≠cia', 
        'DESCONTO DE ALIMENTA√á√ÉO', 'MENSALIDADE SINDICAL', 'Vale Transporte',
        'Corre√ß√£o adiantamento'
    ]
    return ganhos, descontos

# ======================================
# DASHBOARD ESCRIT√ìRIO (NOVO)
# ======================================
# Adicione esta fun√ß√£o ao seu c√≥digo existente

def dashboard_escritorio():
    st.title("üè¢ An√°lise de Efetivo - Escrit√≥rio")

    # Carrega dados
    df = carregar_dados_efetivo()
    
    # Filtra apenas escrit√≥rio engenharia
    df = df[df['Obra'] == 'ESCRIT√ìRIO ENGENHARIA']
    
    # Verifica se existe coluna Departamento
    if 'Departamento' not in df.columns:
        st.error("Coluna 'Departamento' n√£o encontrada!")
        return

    
    # Infer√™ncia de g√™nero a partir do primeiro nome
    def inferir_genero(nome):
        nome = str(nome).split()[0].strip().upper()
        if nome.endswith('A'):
            return 'Feminino'
        else:
            return 'Masculino'

    df['G√™nero'] = df['Nome do Funcion√°rio'].apply(inferir_genero)

    lista_departamentos = sorted(df['Departamento'].astype(str).unique())
    lista_funcionarios = sorted(df['Nome do Funcion√°rio'].unique())

    ganhos, descontos = definir_colunas_ganhos_descontos()
    df['Total Extra'] = df['Hora Extra 70% - Semana'] + df['Hora Extra 70% - Sabado']



    
    lista_departamentos = sorted(df['Departamento'].astype(str).unique())
    lista_funcionarios = sorted(df['Nome do Funcion√°rio'].unique())  # Lista para o novo filtro
    
    ganhos, descontos = definir_colunas_ganhos_descontos()
    df['Total Extra'] = df['Hora Extra 70% - Semana'] + df['Hora Extra 70% - Sabado']

    with st.sidebar:
        st.header("üîç Filtros - Escrit√≥rio")
        departamentos_selecionados = st.multiselect(
            "Departamentos:", 
            lista_departamentos, 
            default=lista_departamentos,
            key="escritorio_deptos"
        )
        tipo_selecionado = st.radio(
            "Tipo:", 
            ['Todos', 'DIRETO', 'INDIRETO'],
            horizontal=True,
            key="escritorio_tipo"
        )
        tipo_analise = st.radio(
            "Tipo de An√°lise da Tabela:", 
            ['Produ√ß√£o', 'Hora Extra Semana', 'Hora Extra S√°bado'],
            key="escritorio_analise"
        )
        qtd_linhas = st.radio(
            "Qtd. de Funcion√°rios na Tabela:", 
            ['5', '10', '20', 'Todos'], 
            horizontal=True,
            key="escritorio_qtd"
        )
        tipo_peso = st.radio(
            "Tipo de Peso:", 
            ['Peso sobre Produ√ß√£o', 'Peso sobre Hora Extra'],
            key="escritorio_peso"
        )
        
        st.divider()
        st.header("üí∞ An√°lise Financeira")
        analise_financeira = st.radio(
            "An√°lise:", 
            ['Geral', 'Ganhos', 'Descontos'],
            key="escritorio_financeira"
        )

    # Filtra dados por departamento e tipo
    df_filtrado = df[df['Departamento'].isin(departamentos_selecionados)]
    
    if tipo_selecionado != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['Tipo'] == tipo_selecionado]

    # Novo filtro por funcion√°rio (apenas para an√°lise financeira)
    if analise_financeira in ['Geral', 'Ganhos', 'Descontos']:
        funcionario_selecionado = st.selectbox(
            "üîé Filtrar por funcion√°rio (opcional):",
            ["Todos"] + lista_funcionarios,
            key="filtro_funcionario"
        )
        
        if funcionario_selecionado != "Todos":
            df_filtrado = df_filtrado[df_filtrado['Nome do Funcion√°rio'] == funcionario_selecionado]

    # M√©tricas (sem terceiros)
    direto_count = len(df_filtrado[df_filtrado['Tipo'] == 'DIRETO'])
    indireto_count = len(df_filtrado[df_filtrado['Tipo'] == 'INDIRETO'])
    total_geral = direto_count + indireto_count

    col1, col2, col3 = st.columns(3)
    col1.metric("üë∑ Direto", direto_count)
    col2.metric("üë∑‚Äç‚ôÇÔ∏è Indireto", indireto_count)
    col3.metric("üë• Total", total_geral)

    st.divider()
  
    # An√°lise Financeira
    if not df_filtrado.empty:
        st.markdown("### üí∞ An√°lise Financeira")
        
        if analise_financeira == 'Geral':
            fig_cascata, total_ganhos, total_descontos, remuneracao_liquida = criar_grafico_cascata(df_filtrado, ganhos, descontos)
            st.plotly_chart(fig_cascata, use_container_width=True)
            
            # Resumo dos valores financeiros
            col_fin1, col_fin2, col_fin3 = st.columns(3)
            col_fin1.metric("üíö Total Ganhos", 
                          f"R$ {total_ganhos:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            col_fin2.metric("üí∏ Total Descontos", 
                          f"R$ {total_descontos:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            col_fin3.metric("üí∞ Remunera√ß√£o L√≠quida", 
                          f"R$ {remuneracao_liquida:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            
        elif analise_financeira == 'Ganhos':
            fig_ganhos = criar_grafico_detalhado(
                df_filtrado=df_filtrado,
                colunas=ganhos,
                titulo="Detalhamento dos Ganhos - Escrit√≥rio",
                cor="green"
            )
            if fig_ganhos:
                st.plotly_chart(fig_ganhos, use_container_width=True)
            else:
                st.warning("Nenhum dado de ganhos encontrado para os filtros selecionados.")
                
        elif analise_financeira == 'Descontos':
            fig_descontos = criar_grafico_detalhado(
                df_filtrado=df_filtrado,
                colunas=descontos,
                titulo="Detalhamento dos Descontos - Escrit√≥rio",
                cor="red"
            )
            if fig_descontos:
                st.plotly_chart(fig_descontos, use_container_width=True)
            else:
                st.warning("Nenhum dado de descontos encontrado para os filtros selecionados.")
        
        st.divider()

    # Gr√°fico de Pizza - Apenas diretos e indiretos
    pizza_base = df[df['Departamento'].isin(departamentos_selecionados)]
    pizza_diretos_indiretos = pizza_base['Tipo'].value_counts().reset_index()
    pizza_diretos_indiretos.columns = ['Tipo', 'count']

    # Gr√°fico de Pizza - G√™nero
    genero_counts = pizza_base['G√™nero'].value_counts().reset_index()
    genero_counts.columns = ['G√™nero', 'Quantidade']
    fig_genero = px.pie(genero_counts, names='G√™nero', values='Quantidade', title='Distribui√ß√£o por G√™nero (Estimado)', hole=0.3)
    fig_genero.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig_genero, use_container_width=True)
    
    fig_pizza = px.pie(
        pizza_diretos_indiretos,
        names='Tipo', 
        values='count', 
        title='Distribui√ß√£o por Tipo de Efetivo (Escrit√≥rio)',
        hole=0.3
    )
    fig_pizza.update_traces(textposition='inside', textinfo='percent+label')
    st.plotly_chart(fig_pizza, use_container_width=True)

    # [...] (restante do c√≥digo existente - ranking, gr√°fico por fun√ß√£o, peso financeiro)

   
    # Ranking de Funcion√°rios (ajustado para departamento)
    coluna_valor = {
        'Produ√ß√£o': 'PRODU√á√ÉO',
        'Hora Extra Semana': 'Hora Extra 70% - Semana',
        'Hora Extra S√°bado': 'Hora Extra 70% - Sabado'
    }[tipo_analise]

    if tipo_selecionado == 'Todos':
        df_ranking = df_filtrado[df_filtrado['Tipo'].isin(['DIRETO', 'INDIRETO'])]
    else:
        df_ranking = df_filtrado

    nome_col_funcao = 'Fun√ß√£o' if 'Fun√ß√£o' in df_ranking.columns else 'Fun√ßao' if 'Fun√ßao' in df_ranking.columns else None

    if tipo_analise == 'Produ√ß√£o' and 'REFLEXO S PRODU√á√ÉO' in df_ranking.columns:
        df_ranking['DSR'] = df_ranking['REFLEXO S PRODU√á√ÉO']
        cols_rank = ['Nome do Funcion√°rio', nome_col_funcao, 'Departamento', 'Tipo', 'PRODU√á√ÉO', 'DSR']
        valor_coluna = 'PRODU√á√ÉO'
    else:
        cols_rank = ['Nome do Funcion√°rio', nome_col_funcao, 'Departamento', 'Tipo', coluna_valor]
        valor_coluna = coluna_valor

    cols_rank = [c for c in cols_rank if c is not None and c in df_ranking.columns]
    df_ranking_limp = df_ranking[cols_rank].copy()
    df_ranking_limp = df_ranking_limp[pd.to_numeric(df_ranking_limp[valor_coluna], errors='coerce').notna()]
    df_ranking_limp = df_ranking_limp[df_ranking_limp[valor_coluna] > 0]
    ranking = df_ranking_limp.sort_values(by=valor_coluna, ascending=False)

    valor_total = df_ranking_limp[valor_coluna].sum()
    st.markdown(f"### üìã Top Funcion√°rios por **{tipo_analise}**")
    st.markdown(f"**Total em {tipo_analise}:** R$ {valor_total:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

    if qtd_linhas != 'Todos':
        ranking = ranking.head(int(qtd_linhas))

    def formatar_valor(x):
        return f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

    ranking[valor_coluna] = ranking[valor_coluna].apply(formatar_valor)
    if 'DSR' in ranking.columns:
        ranking['DSR'] = ranking['DSR'].apply(formatar_valor)

    st.dataframe(ranking, use_container_width=True)
    st.divider()
    
    # Gr√°fico por Fun√ß√£o (se existir a coluna)
    if nome_col_funcao and nome_col_funcao in df_ranking.columns:
        graf_funcao = df_ranking[nome_col_funcao].value_counts().reset_index()
        graf_funcao.columns = [nome_col_funcao, 'Qtd']
        fig_bar = px.bar(
            graf_funcao,
            x=nome_col_funcao,
            y='Qtd',
            color='Qtd',
            color_continuous_scale='Blues',
            title='Quantidade por Fun√ß√£o',
            labels={'Qtd': 'Quantidade', nome_col_funcao: 'Fun√ß√£o'}
        )
        st.plotly_chart(fig_bar, use_container_width=True)

    st.divider()

    # Gr√°fico de Peso Financeiro (ajustado para departamento)
    todos_departamentos = sorted(df['Departamento'].astype(str).unique())
    peso_lista = []
    for depto in todos_departamentos:
        df_depto = df[df['Departamento'] == depto]
        df_direto = df_depto[df_depto['Tipo'] == 'DIRETO']
        prod_numerador = df_direto['PRODU√á√ÉO'].sum() + df_direto['REFLEXO S PRODU√á√ÉO'].sum()
        prod_denominador = df_direto['Remunera√ß√£o L√≠quida Folha'].sum() + df_direto['Adiantamento'].sum()
        df_dir_ind = df_depto[df_depto['Tipo'].isin(['DIRETO', 'INDIRETO'])]
        total_extra = df_dir_ind['Total Extra'].sum()
        reposo_remunerado = df_dir_ind['Repouso Remunerado'].sum()
        hor_extra_denominador = df_dir_ind['Remunera√ß√£o L√≠quida Folha'].sum() + df_dir_ind['Adiantamento'].sum()

        if tipo_peso == 'Peso sobre Produ√ß√£o':
            peso = (prod_numerador / prod_denominador) if prod_denominador > 0 else 0
        else:
            peso = ((total_extra + reposo_remunerado) / hor_extra_denominador) if hor_extra_denominador > 0 else 0

        peso_lista.append({'Departamento': depto, 'Peso Financeiro': peso})

    df_peso = pd.DataFrame(peso_lista)
    df_peso = df_peso.sort_values(by='Peso Financeiro', ascending=False)
    df_peso['Selecionada'] = df_peso['Departamento'].apply(lambda x: x in departamentos_selecionados)
    colors = df_peso['Selecionada'].map({True: 'darkblue', False: 'lightblue'})

        # C√≥digo anterior...
    
    fig_peso = px.bar(
        df_peso,
        x='Departamento',
        y='Peso Financeiro',
        title=f'Peso Financeiro por Departamento ({tipo_peso})',
        labels={'Peso Financeiro': '√çndice', 'Departamento': 'Departamento'},
        text=df_peso['Peso Financeiro'].apply(lambda x: f"{x:.2%}"),
    )

    fig_peso.update_traces(
        marker_color=colors,
        textposition='outside',
        marker_line_color='black',
        marker_line_width=0.5
    )
    
    fig_peso.update_layout(
        yaxis_tickformat='.0%',
        showlegend=False,
        xaxis={'categoryorder': 'array', 'categoryarray': df_peso['Departamento']}
    )
    
    st.plotly_chart(fig_peso, use_container_width=True) 


def main():
    st.set_page_config(page_title="Dashboards Inteligentes", layout="wide")
    
    # 1. Configura√ß√£o do estado inicial
    if 'aba_atual' not in st.session_state:
        st.session_state.aba_atual = "üìä"
    
    # 2. Cabe√ßalho
    col1, col2 = st.columns([1, 4])
    with col1:
        st.image("logotipo.png", width=400)
    with col2:
        st.markdown("<h1 style='margin-top: 30px;'>SISTEMA INTELIGENTE DE GEST√ÉO</h1>", unsafe_allow_html=True)
    
    # 3. Sidebar com navega√ß√£o instant√¢nea
    with st.sidebar:
        st.title("üéõÔ∏è Painel de Controle")
        
        # Cria bot√µes estilo aba para melhor UX
        opcoes_abas = {
            "üìä": "efetivo",
            "üìà": "produtividade",
            "üè¢": "escritorio"
        }
        
        # Exibe como bot√µes horizontais
        cols = st.columns(len(opcoes_abas))
        for idx, (nome_aba, aba_key) in enumerate(opcoes_abas.items()):
            with cols[idx]:
                if st.button(nome_aba, key=f"btn_{aba_key}"):
                    st.session_state.aba_atual = nome_aba
    
    # 4. Renderiza√ß√£o condicional
    try:
        if st.session_state.aba_atual == "üìä":
            dashboard_efetivo()
        elif st.session_state.aba_atual == "üè¢":
            dashboard_escritorio()
        elif st.session_state.aba_atual == "üìà":
            dashboard_produtividade()
        
            
    except Exception as e:
        st.error(f"Erro ao carregar o dashboard: {str(e)}")
        st.session_state.aba_atual = "üìä"  # Volta para aba segura

if __name__ == "__main__":
    main()
